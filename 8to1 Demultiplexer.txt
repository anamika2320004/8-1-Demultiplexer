//8:1 Demultiplexer
//code 
module demux8to1 (
    input wire d,          // Single data input
    input wire [2:0] sel,  // 3-bit select line
    output wire [7:0] y    // 8 outputs
);

assign y[0] = (sel == 3'b000) ? d : 1'b0;
assign y[1] = (sel == 3'b001) ? d : 1'b0;
assign y[2] = (sel == 3'b010) ? d : 1'b0;
assign y[3] = (sel == 3'b011) ? d : 1'b0;
assign y[4] = (sel == 3'b100) ? d : 1'b0;
assign y[5] = (sel == 3'b101) ? d : 1'b0;
assign y[6] = (sel == 3'b110) ? d : 1'b0;
assign y[7] = (sel == 3'b111) ? d : 1'b0;

endmodule

//testbench
`timescale 1ns/1ps

module tb_demux8to1;

reg d;
reg [2:0] sel;
wire [7:0] y;

// Instantiate the 8:1 DEMUX
demux8to1 uut (
    .d(d),
    .sel(sel),
    .y(y)
);

initial begin
    // Initialize data input
    d = 1'b1;

    // Test all select lines
    sel = 3'b000; #10;
    $display("sel=%b, y=%b", sel, y);

    sel = 3'b001; #10;
    $display("sel=%b, y=%b", sel, y);

    sel = 3'b010; #10;
    $display("sel=%b, y=%b", sel, y);

    sel = 3'b011; #10;
    $display("sel=%b, y=%b", sel, y);

    sel = 3'b100; #10;
    $display("sel=%b, y=%b", sel, y);

    sel = 3'b101; #10;
    $display("sel=%b, y=%b", sel, y);

    sel = 3'b110; #10;
    $display("sel=%b, y=%b", sel, y);

    sel = 3'b111; #10;
    $display("sel=%b, y=%b", sel, y);

    $stop;
end

endmodule
